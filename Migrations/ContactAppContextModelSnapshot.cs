// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using angular7_aspcore.Models;

namespace angular7_aspcore.Migrations
{
    [DbContext(typeof(ContactAppContext))]
    partial class ContactAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("angular7_aspcore.Models.Contact", b =>
                {
                    b.Property<long?>("contactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("birth");

                    b.Property<string>("email");

                    b.Property<byte>("gender");

                    b.Property<string>("name");

                    b.Property<string>("role");

                    b.Property<string>("techno");

                    b.HasKey("contactId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new { contactId = 1L, birth = new DateTime(1966, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), email = "ar.b@isp.com", gender = (byte)0, name = "Andrew", role = "Developer", techno = "Typescript" },
                        new { contactId = 2L, birth = new DateTime(1988, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), email = "al.l@mail.com", gender = (byte)1, name = "Alex", role = "Front end", techno = "Angular" },
                        new { contactId = 3L, birth = new DateTime(1975, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), email = "example@mail.net", gender = (byte)0, name = "Rob", role = "Lead developer", techno = "C#" }
                    );
                });

            modelBuilder.Entity("angular7_aspcore.Models.Settings", b =>
                {
                    b.Property<long?>("settingsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("chartAreaBackgroundColour");

                    b.Property<string>("chartLineColour");

                    b.Property<double?>("chartLineWidth");

                    b.Property<string>("chartModalBackgroundColour");

                    b.Property<long?>("chartScaleLabelFontSize");

                    b.Property<long?>("chartTitleFontSize");

                    b.HasKey("settingsId");

                    b.ToTable("Settings");

                    b.HasData(
                        new { settingsId = 1L, chartAreaBackgroundColour = "#99ebff", chartLineColour = "#ff0000", chartLineWidth = 0.5, chartModalBackgroundColour = "rgb(169, 247, 208)", chartScaleLabelFontSize = 14L, chartTitleFontSize = 18L }
                    );
                });

            modelBuilder.Entity("angular7_aspcore.Models.Type", b =>
                {
                    b.Property<long?>("typeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("name");

                    b.HasKey("typeId");

                    b.ToTable("Types");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Type");
                });

            modelBuilder.Entity("angular7_aspcore.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("angular7_aspcore.Models.Vehicle", b =>
                {
                    b.Property<long?>("vehicleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("contactId");

                    b.Property<string>("imagePath");

                    b.Property<string>("make");

                    b.Property<string>("model");

                    b.Property<long>("ownershipPeriod");

                    b.Property<DateTime>("purchaseDate");

                    b.Property<decimal>("purchasePrice");

                    b.Property<string>("registration");

                    b.Property<decimal>("residualValue");

                    b.Property<long?>("typeId");

                    b.Property<string>("version");

                    b.HasKey("vehicleId");

                    b.HasIndex("contactId");

                    b.HasIndex("typeId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new { vehicleId = 1L, contactId = 1L, make = "Ford", model = "Focus", ownershipPeriod = 5L, purchaseDate = new DateTime(2015, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), purchasePrice = 20000m, registration = "FG15BDA", residualValue = 11000m, typeId = 2L, version = "1.0 EcoBoost" },
                        new { vehicleId = 2L, contactId = 2L, make = "Fiat", model = "500", ownershipPeriod = 10L, purchaseDate = new DateTime(2014, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), purchasePrice = 15000m, registration = "FG14BDE", residualValue = 3000m, typeId = 2L, version = "Abarth" },
                        new { vehicleId = 3L, contactId = 3L, make = "Mercedes-Benz", model = "C-Class", ownershipPeriod = 4L, purchaseDate = new DateTime(2017, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), purchasePrice = 28000m, registration = "VG67BDA", residualValue = 20000m, typeId = 1L, version = "180" },
                        new { vehicleId = 4L, contactId = 3L, make = "BMW", model = "X5", ownershipPeriod = 6L, purchaseDate = new DateTime(2015, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), purchasePrice = 55000m, registration = "NH65LKU", residualValue = 25000m, typeId = 3L, version = "5.0 M" },
                        new { vehicleId = 5L, contactId = 2L, make = "Porsche", model = "Boxster", ownershipPeriod = 7L, purchaseDate = new DateTime(2010, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), purchasePrice = 46000m, registration = "LP60AWE", residualValue = 27000m, typeId = 4L, version = "S" },
                        new { vehicleId = 6L, contactId = 2L, make = "Mercedes-Benz", model = "SL", ownershipPeriod = 9L, purchaseDate = new DateTime(2012, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), purchasePrice = 68000m, registration = "MB62DSA", residualValue = 21000m, typeId = 5L, version = "500" }
                    );
                });

            modelBuilder.Entity("angular7_aspcore.Models.Bodystyle", b =>
                {
                    b.HasBaseType("angular7_aspcore.Models.Type");


                    b.ToTable("Bodystyle");

                    b.HasDiscriminator().HasValue("Bodystyle");

                    b.HasData(
                        new { typeId = 1L, name = "Saloon" },
                        new { typeId = 2L, name = "Hatchback" },
                        new { typeId = 3L, name = "SUV" },
                        new { typeId = 4L, name = "Sports" },
                        new { typeId = 5L, name = "GT Coupe" }
                    );
                });

            modelBuilder.Entity("angular7_aspcore.Models.Vehicle", b =>
                {
                    b.HasOne("angular7_aspcore.Models.Contact", "contact")
                        .WithMany()
                        .HasForeignKey("contactId");

                    b.HasOne("angular7_aspcore.Models.Bodystyle", "bodystyle")
                        .WithMany()
                        .HasForeignKey("typeId");
                });
#pragma warning restore 612, 618
        }
    }
}
